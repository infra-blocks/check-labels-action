import { Octokit } from "@octokit/core";
import { components } from "@octokit/openapi-types";
export type PullRequest = components["schemas"]["pull-request-simple"];
export type IssueComment = components["schemas"]["issue-comment"];
/**
 * An extension of the {@link GitHubClient} made to work on a specific repository.
 *
 * For operations that happen on a specific repository, it can be convenient to pass
 * the repository information once to the client, instead of every call.
 *
 * This is the problem this client solves. Those clients should be
 * created using the {@link GitHubClient#inRepositoryScope} method.
 */
export declare class GitHubRepositoryClient {
    private readonly owner;
    private readonly repository;
    private readonly client;
    constructor(params: {
        owner: string;
        repository: string;
        client: GitHubClient;
    });
    /**
     * @see GitHubClient#listPrs
     */
    listPrs(): ReturnType<GitHubClient["listPrs"]>;
    /**
     * @see GitHubClient#listPrsWithLabel
     */
    listPrsWithLabel(params: {
        label: string;
    }): ReturnType<GitHubClient["listPrsWithLabel"]>;
    /**
     * @see GitHubClient#findBranchPrs
     */
    findBranchPrs(params: {
        branchName: string;
    }): ReturnType<GitHubClient["findBranchPrs"]>;
    /**
     * @see GitHubClient#findCommitPrs
     */
    findCommitPrs(params: {
        commitSha1: string;
    }): ReturnType<GitHubClient["findBranchPrs"]>;
    /**
     * @see GitHubClient#postIssueComment
     */
    postIssueComment(params: {
        issueNumber: number;
        body: string;
    }): ReturnType<GitHubClient["postIssueComment"]>;
    /**
     * @see GitHubClient#listIssueComments
     */
    listIssueComments(params: {
        issueNumber: number;
    }): ReturnType<GitHubClient["listIssueComments"]>;
    /**
     * @see GitHubClient#deleteIssueComment
     */
    deleteIssueComment(params: {
        commentId: number;
    }): ReturnType<GitHubClient["deleteIssueComment"]>;
    private addRepoInfo;
}
/**
 * A GitHub convenience client.
 *
 * The "owner" in the context of the GitHub API is either the organization or the user to which
 * repositories belong to. The "repository" is the repository itself. Hence, the URL
 * github.com/Trololol/repo1 refers to the repository "repo1" owned by "Trololol".
 */
export declare class GitHubClient {
    private readonly octokit;
    constructor(params: {
        octokit: Octokit;
    });
    /**
     * Returns an instance of {@link GitHubRepositoryClient}.
     *
     * All of the operations of the returned client will take place on the
     * specified repository.
     *
     * @param params.owner - The repository owner
     * @param params.repository - The repository name
     */
    inRepositoryScope(params: {
        owner: string;
        repository: string;
    }): GitHubRepositoryClient;
    /**
     * Lists all pull requests of the provided repository.
     *
     * @param params.owner - The repository owner
     * @param params.repository - The repository name
     */
    listPrs(params: {
        owner: string;
        repository: string;
    }): Promise<PullRequest[]>;
    /**
     * Returns the list of pull requests in the provided repository that are marked with the given label.
     *
     * @param params.owner - The repository owner
     * @param params.repository - The repository name
     * @param params.label - The label that marks the pull requests.
     */
    listPrsWithLabel(params: {
        owner: string;
        repository: string;
        label: string;
    }): Promise<PullRequest[]>;
    /**
     * Returns the open pull requests corresponding to the provided branch name in the given
     * repository.
     *
     * For example, if the branch name is `feature/stuff`, this function will return all open
     * PRs that have this branch as their head ref.
     *
     * @param params.owner - The repository owner.
     * @param params.repository - The name of the repository.
     * @param params.branchName - The name of the branch to match.
     *
     * @return The list of open PRs for the provided branch.
     */
    findBranchPrs(params: {
        owner: string;
        repository: string;
        branchName: string;
    }): Promise<PullRequest[]>;
    /**
     * Returns the list of pull requests associated with a commit SHA-1 in the given repository.
     *
     * @param params.owner - The repository owner.
     * @param params.repository - The name of the repository.
     * @param params.commitSha1 - The full or partial commit SHA-1 value.
     *
     * @return The list of PRs with the provided commit.
     */
    findCommitPrs(params: {
        owner: string;
        repository: string;
        commitSha1: string;
    }): Promise<PullRequest[]>;
    /**
     * Posts a comment on an issue.
     *
     * Note that a pull request is also an issue. Using this API for a pull request results in a
     * comment for the whole PR (constrasting with a comment for a specific line on a given commit, or
     * par of a review, for example).
     *
     * @param params.owner - The repository owner
     * @param params.repository - The repository name
     * @param params.issueNumber - The issue number. This can also be a PR number.
     * @param params.body - The body of the comment.
     */
    postIssueComment(params: {
        owner: string;
        repository: string;
        issueNumber: number;
        body: string;
    }): Promise<void>;
    /**
     * Lists the comments pertaining to an issue.
     *
     * Note that a pull request is also an issue. Using this API for a pull request lists all top
     * level comments for the whole PR.
     *
     * @param params.owner - The repository owner
     * @param params.repository - The repository name
     * @param params.issueNumber - The number of the issue. This could also be a PR number.
     *
     * @return A list of comments pertaining to the issue.
     */
    listIssueComments(params: {
        owner: string;
        repository: string;
        issueNumber: number;
    }): Promise<IssueComment[]>;
    /**
     * Deletes a comment on an issue.
     *
     * Note that a pull request is also an issue. Using this API for a pull request deletes a top
     * level comment for the whole PR.
     *
     * @param params.owner - The repository owner
     * @param params.repository - The repository name
     * @param params
     */
    deleteIssueComment(params: {
        owner: string;
        repository: string;
        commentId: number;
    }): Promise<void>;
}
/**
 * Returns a {@link GitHubClient} that will use to provided token when authenticating against the
 * GitHub API.
 *
 * @param params.gitHubToken - The GitHub authentication token.
 */
export declare function createGitHubClient(params: {
    gitHubToken: string;
}): GitHubClient;
/**
 * Mister Robot is the avatar providing comments on the pull requests.
 *
 * His comments are meant to be singletons on the pull requests. Meaning, if
 * they exist, then they are removed and reposted anew. We don't edit them because
 * we want Slack notifications to be triggered.
 */
export declare class MisterRobot {
    private static readonly COMMENT_SUFFIX;
    private readonly gitHubClient;
    private readonly pullRequest;
    constructor(params: {
        gitHubClient: GitHubRepositoryClient;
        pullRequest: PullRequest;
    });
    /**
     * Provides a PR comment with the given body.
     *
     * If there already exists a comment by Mister Robot, it is first removed and then a
     * new comment is created.
     *
     * @param params.body - The comment body.
     */
    providePrComment(params: {
        body: string;
    }): Promise<void>;
}
/**
 * Returns a configured instance of {@link MisterRobot}
 *
 * @param params.gitHubClient - The client that will be used for GitHub interactions.
 *
 * @return An instance of {@link MisterRobot}
 */
export declare function createMisterRobot(params: {
    gitHubClient: GitHubRepositoryClient;
    pullRequest: PullRequest;
}): MisterRobot;
