// TODO: into lib.
import { createRequire as _createRequire } from "module";
const __require = _createRequire(import.meta.url);
const VError = __require("verror");
/**
 * Typed enum of possible GitHub actions events.
 *
 * This is meant to be extended as we create more GitHub actions
 */
export var Event;
(function (Event) {
    Event[Event["Push"] = 0] = "Push";
    Event[Event["PullRequest"] = 1] = "PullRequest";
})(Event = Event || (Event = {}));
/**
 * Parses the event name and returns the corresponding {@link Event}
 *
 * @param eventName - The name of the event, as provided by the GitHub context.
 */
export function parseEvent(eventName) {
    switch (eventName) {
        case "push":
            return Event.Push;
        case "pull_request":
            return Event.PullRequest;
        default:
            throw new Error(`unsupported event: ${eventName}`);
    }
}
/**
 * Parses and verifies that the event is part of the supported event.
 *
 * This is useful in the context of actions where you don't expect most events to trigger the
 * action.
 *
 * If the event is supported, then it is returned. Otherwise, an error is thrown.
 *
 * @param eventName - The event name, as provided by the GitHub context.
 * @param supported - The list of supported events by the action.
 *
 * @return The parsed event, if it's supported.
 */
export function checkSupportedEvent(eventName, supported) {
    const event = parseEvent(eventName);
    if (supported.includes(event)) {
        return event;
    }
    throw new Error(`unsupported event: ${eventName}`);
}
function parseInput(input, transform, options) {
    const required = options == null ||
        !Object.prototype.hasOwnProperty.call(options, "default");
    // GitHub actions actually provide the value as an empty string when it is missing at the time
    // of this writing.
    if (input == null || input === "") {
        if (required) {
            throw Error("input is missing value and no default was provided");
        }
        return options?.default;
    }
    return transform(input);
}
/**
 * Returns a validator for string inputs.
 *
 * @param options.default - If defined, the input becomes optional and when
 *                          not found, the default value is returned.
 */
export function stringInput(options) {
    return {
        parse(input) {
            return parseInput(input, (input) => input, options);
        },
    };
}
/**
 * Returns a validator for arrays parsed out of strings.
 *
 * The default separator is the comma, but users can specify other
 * separators.
 *
 * @param options.default - If defined, the input becomes optional and when
 *                          not found, the default value is returned.
 * @param options.separator - The token separator. Defaults to ",".
 */
export function arrayInput(options) {
    const { separator = "," } = options || {};
    return {
        parse(input) {
            return parseInput(input, (input) => input.split(separator), options);
        },
    };
}
/**
 * Returns a validator for boolean inputs.
 *
 * @param options.default - If defined, the input becomes optional and when
 *                          not found, the default value is returned.
 */
export function booleanInput(options) {
    return {
        parse(input) {
            function transform(input) {
                if (input === "true") {
                    return true;
                }
                if (input === "false") {
                    return false;
                }
                throw new Error(`invalid boolean input: ${input}`);
            }
            return parseInput(input, transform, options);
        },
    };
}
/**
 * Returns a type safe snapshot of the provided GitHub actions inputs.
 *
 * @param inputValidators - An object where the keys are the name of the inputs
 * and the values are their matching validators.
 */
export function getInputs(inputValidators) {
    const result = {};
    for (const [name, value] of Object.entries(inputValidators)) {
        const input = getInput(name);
        try {
            result[name] = value.parse(input);
        }
        catch (err) {
            throw new VError({ name: "GetInputsError", cause: err }, `error parsing input ${name}`);
        }
    }
    return result;
}
/**
 * Returns the value of the input, as found in the environment.
 *
 * This function was copied over from @actions/core, just because we wanted to avoid having
 * a dependency for this single functionality.
 *
 * @param name - The input name.
 */
function getInput(name) {
    return process.env[`INPUT_${name.replace(/ /g, "_").toUpperCase()}`];
}
//# sourceMappingURL=github-action.js.map