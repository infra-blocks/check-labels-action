/**
 * Typed enum of possible GitHub actions events.
 *
 * This is meant to be extended as we create more GitHub actions
 */
export declare enum Event {
    Push = 0,
    PullRequest = 1
}
/**
 * Parses the event name and returns the corresponding {@link Event}
 *
 * @param eventName - The name of the event, as provided by the GitHub context.
 */
export declare function parseEvent(eventName: string): Event;
/**
 * Parses and verifies that the event is part of the supported event.
 *
 * This is useful in the context of actions where you don't expect most events to trigger the
 * action.
 *
 * If the event is supported, then it is returned. Otherwise, an error is thrown.
 *
 * @param eventName - The event name, as provided by the GitHub context.
 * @param supported - The list of supported events by the action.
 *
 * @return The parsed event, if it's supported.
 */
export declare function checkSupportedEvent(eventName: string, supported: ReadonlyArray<Event>): Event;
/**
 * Validator objects used to extract GitHub actions values.
 */
export interface InputValidator<T> {
    parse(input: string | undefined): T;
}
export declare function stringInput(): InputValidator<string>;
export declare function stringInput(options: {
    default: string;
}): InputValidator<string>;
export declare function stringInput(options: {
    default: undefined;
}): InputValidator<string | undefined>;
export declare function arrayInput(options?: {
    separator?: string | RegExp;
}): InputValidator<ReadonlyArray<string>>;
export declare function arrayInput(options: {
    default: ReadonlyArray<string>;
    separator?: string | RegExp;
}): InputValidator<ReadonlyArray<string>>;
export declare function arrayInput(options: {
    default: undefined;
    separator?: string | RegExp;
}): InputValidator<ReadonlyArray<string> | undefined>;
export declare function booleanInput(): InputValidator<boolean>;
export declare function booleanInput(options: {
    default: boolean;
}): InputValidator<boolean>;
export declare function booleanInput(options: {
    default: undefined;
}): InputValidator<boolean | undefined>;
/**
 * Returns a type safe snapshot of the provided GitHub actions inputs.
 *
 * @param inputValidators - An object where the keys are the name of the inputs
 * and the values are their matching validators.
 */
export declare function getInputs<T>(inputValidators: {
    [K in keyof T]: InputValidator<T[K]>;
}): Readonly<T>;
